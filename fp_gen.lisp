;;TinyLisp only

(define verilog-fp_add
  (lambda (a b z sign_bit expt_msb expt_lsb frac_msb frac_lsb)
	(let*
	  (expt_sb (+ (abs(- expt_msb expt_lsb)) 1))
	  (frac_sb (+ (abs(- frac_msb frac_lsb)) 1))
	  (expt_mask (- (expt 2 (- expt_sb 1)) 1))
	  (sa (s+ 'sign_ a))
	  (ea (s+ 'expt_ a))
	  (sea (s+ 'sign_expt_ a))
	  (mea (s+ 'mant_expt_ a))
	  (sb (s+ 'sign_ b))
	  (eb (s+ 'expt_ b))
	  (seb (s+ 'sign_expt_ b))
	  (meb (s+ 'mant_expt_ b))
	  (sdeab (s+ 'sign_diff_expt_ a '_ b))
	  (mdeab (s+ 'mant_diff_expt_ a '_ b))
	  (fa (s+ 'frac_ a))
	  (fb (s+ 'frac_ b))
	  (s1a (s+ 'sign_1a_ z))
	  (s1b (s+ 'sign_1b_ z))
	  (f1a (s+ 'frac_1a_ z))
	  (f1b (s+ 'frac_1b_ z))
	  (s2a (s+ 'sign_2a_ z))
	  (s2b (s+ 'sign_2b_ z))
	  (f2a (s+ 'frac_2a_ z))
	  (f2b (s+ 'frac_2b_ z))
	  (s2z (s+ 'sign_2_ z))
	  (f2z (s+ 'frac_2_ z))
	  (c2z (s+ 'check_2_ z))
	  (sie2 (s+ 'sign_incr_expt_ z))
	  (mie2 (s+ 'mant_incr_expt_ z))
	  (sz (s+ 'sign_ z))
	  (ez (s+ 'expt_ z))
	  (fz (s+ 'frac_ z))
	  (progn
		(printf '\n//verilog-fp_add%tstart\n)
		(printf 'wire%t%s%t=%t%s[%d];\n sa a sign_bit)
		(printf 'wire%t[%d:0]%t%s%t=%t%s[%d:%d];\n (- expt_sb 1) ea a expt_msb expt_lsb)
		(printf 'wire%t%s%t=%t%l%s%t<%t%d%r%t?%t1%t:%t0;\n sea ea expt_mask)
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t?%t%d%t-%t%s%t:%t%s%t-%t%d;\n (- expt_sb 2) mea sea expt_mask ea ea expt_mask)
		(printf 'wire%t%s%t=%t%s[%d];\n sb b sign_bit)
		(printf 'wire%t[%d:0]%t%s%t=%t%s[%d:%d];\n (- expt_sb 1) eb b expt_msb expt_lsb)
		(printf 'wire%t%s%t=%t%l%s%t<%t%d%r%t?%t1%t:%t0;\n seb eb expt_mask)
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t?%t%d%t-%t%s%t:%t%s%t-%t%d;\n (- expt_sb 2) meb seb expt_mask eb eb expt_mask)
		(printf 'wire%t%s%t=%t\n sdeab)
		(printf '\t%l{%s,%s}==2'b10%r%t?%t1%t:%t\n sea seb)
		(printf '%l%l{%s,%s}==2\'b00%r%t&%t%l%s%t<%t%s%r%r%t?%t1%t:%t\n sea seb mea meb)
		(printf '%l%l{%s,%s}==2\'b11%r%t&%t%l%s%t>%t%s%r%r%t?%t1%t:%t\n sea seb mea meb)
		(printf '\t0;\n)
		(printf 'wire%t[%d:0]%t%s%t=\n (- expt_sb 1) mdeab)
		(printf '\t%l{%s,%s}==2\'b00%r%t?%t%l%l%s%t<%t%s%r%t?%t%s%t-%t%s%t:%t%s%t-%t%s%r%t:%t\n sea seb mea meb meb mea mea meb)
		(printf '\t%l{%s,%s}==2\'b01%r%t?%t%s%t+%t%s%t:%t\n sea seb mea meb)
		(printf '\t%l{%s,%s}==2\'b10%r%t?%t%s%t+%t%s%t:%t\n sea seb mea meb)
		(printf '\t%l{%s,%s}==2\'b11%r%t?%t%l%l%s%t<%t%s%r%t?%t%s%t-%t%s%t:%t%s%t-%t%s%r%t:%t\n sea seb mea meb meb mea mea meb)
		(printf '\t0;\n)
		(printf 'wire%t[%d:0]%t%s%t=%t{2\'b01,%s[%d:0],%d\'d0};\n (+ 2 frac_sb expt_mask -1) fa a frac_msb expt_mask)
		(printf 'wire%t[%d:0]%t%s%t=%t{2\'b01,%s[%d:0],%d\'d0};\n (+ 2 frac_sb expt_mask -1) fb b frac_msb expt_mask)
		(printf 'wire%t%s%t=%t%s%t?%t%s%t:%t%s;\n s1a sdeab sb sa)
		(printf 'wire%t%s%t=%t%s%t?%t%s%t:%t%s;\n s1b sdeab sa sb)
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t?%t%s%t:%t%s;\n (+ 2 frac_sb expt_mask -1) f1a sdeab fb fa)
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t?%t%s%t:%t%s;\n (+ 2 frac_sb expt_mask -1) f1b sdeab fa fb)
		(printf 'wire%t%s%t=%t%s;\n s2a s1a)
		(printf 'wire%t%s%t=%t%s;\n s2b s1b)
		(printf 'wire%t[%d:0]%t%s%t=%t%s;\n (+ 2 frac_sb expt_mask -1) f2a f1a)
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t>>%t%s;\n (+ 2 frac_sb expt_mask -1) f2b f1b mdeab)
		(printf 'wire%t%s%t=\n s2z)
		(printf '\t%l{%s,%s}==2\'b11%r%t?%t1%t:%t\n s2a s2b)
		(printf '\t%l%l{%s,%s}==2\'b10%r%t&%t%l%s%t>%t%s%r%r%t?%t1%t:%t\n s2a s2b f2a f2b)
		(printf '\t%l%l{%s,%s}==2\'b01%r%t&%t%l%s%t<%t%s%r%r%t?%t1%t:%t\n s2a s2b f2a f2b)
		(printf '\t0;\n)
		(printf 'wire%t[%d:0]%t%s%t=\n (+ 2 frac_sb expt_mask -1) f2z)
		(printf '\t%l{%s,%s}==2\'b00%r%t?%t%s%t+%t%s%t:%t\n s2a s2b f2a f2b)
		(printf '\t%l{%s,%s}==2'b01%r%t?%t%l%l%s%t<%t%s%r%t?%t%s%t-%t%s%t:%t%s%t-%t%s%r%t:%t\n s2a s2b f2a f2b f2b f2a f2a f2b)
		(printf '\t%l{%s,%s}==2'b10%r%t?%t%l%l%s%t>%t%s%r%t?%t%s%t-%t%s%t:%t%s%t-%t%s%r%t:%t\n s2a s2b f2a f2b f2a f2b f2b f2a)
		(printf '\t%l{%s,%s}==2\'b11%r%t?%t%s%t+%t%s%t:%t\n s2a s2b f2a f2b)
		(printf '\t0;\n)
		(printf 'wire%t[%d:0]%t%s;\n (+ frac_sb 2 -1) c2z)
		(printf 'assign%t%s[%d]%t=%t%s[%d];\n c2z (+ frac_sb 2 -1) f2z (+ 2 frac_sb expt_mask -1))
		(mapcar
		  (lambda (b2zb)
			(let*
			  (c2zb (- (+ frac_sb 2 -1) b2zb))
			  (f2zb (- (+ 2 frac_sb expt_mask -1) b2zb))
			  (printf 'assign%t%s[%d]%t=%t%s[%d]%t&%t~%s[%d];\n c2z c2zb f2z f2zb c2z (+ c2zb 1))))
		  (linspace 1 1 (+ frac_sb 2 -1)))
		(printf 'wire%t%s%t=%t\n sie2)
		(printf '\t%s[%d]%t?%t0%t:%t\n c2z (+ frac_sb 2 -1))
		(printf '\t%s[%d]%t?%t0%t:%t\n c2z (+ frac_sb 1 -1))
		(printf '\t1;\n)
		(printf 'wire%t[%d:0]%t%s%t=%t\n (- expt_sb 1) mie2)
		(mapcar
		  (lambda (c2zb)
			(printf '\t%s[%d]%t?%t%d%t:%t\n c2z c2zb (abs (- c2zb frac_sb))))
		  (linspace (+ frac_sb 2 -1) -1 0))
		(printf '\t0;\n)
		(printf 'wire%t%s%t=%t%s;\n sz s2z)
		(printf 'wire%t[%d:0]%t%s%t=%t\n expt_sb ez)
		(printf '\t%s%t?%t\n sdeab)
		(printf '\t%l%s%t?%t%s%t-%t%s%t:%t%s%t+%t%s%r%t:%t\n sie2 eb mie2 eb mie2)
		(printf '\t%l%s%t?%t%s%t-%t%s%t:%t%s%t+%t%s%r;%t\n sie2 ea mie2 ea mie2)
		(printf 'wire%t[%d:0]%t%s%t=%t\n frac_msb fz)
		(mapcar
		  (lambda (b2zb)
			(let*
			  (c2zb (- (+ frac_sb 2 -1) b2zb))
			  (f2z_msb (- (+ 1 frac_sb expt_mask -1) b2zb))
			  (f2z_lsb (- (+ 1 frac_sb expt_mask -1) b2zb (- frac_sb 1)))
			  (printf '\t%s[%d]%t?%t%s[%d:%d]%t:%t\n c2z c2zb f2z f2z_msb f2z_lsb)))
		  (linspace 0 1 (+ frac_sb 2 -1)))
		(printf '\t0;\n)
		(printf 'assign%t%s%t=%t{%s,%s,%s};\n z sz ez fz)
		(printf '//verilog-fp_add%tend\n)
		))))

(define verilog-fp_mul
  (lambda (a b z sign_bit expt_msb expt_lsb frac_msb frac_lsb)
	(let*
	  (expt_sb (+ (abs(- expt_msb expt_lsb)) 1))
	  (frac_sb (+ (abs(- frac_msb frac_lsb)) 1))
	  (expt_mask (- (expt 2 (- expt_sb 1)) 1))
	  (sa (s+ 'sign_ a))
	  (sb (s+ 'sign_ b))
	  (sz (s+ 'sign_ z))
	  (ea (s+ 'expt_ a))
	  (eb (s+ 'expt_ b))
	  (e1 (s+ 'expt_1_ z))
	  (fa (s+ 'frac_ a))
	  (fb (s+ 'frac_ b))
	  (f1z (s+ 'frac_1_ z))
	  (cf1z (s+ 'check_frac_1_ z))
	  (ez (s+ 'expt_ z))
	  (fz (s+ 'frac_ z))
	  (progn
		(printf '\n//verilog-fp_mul%tstart\n)
		(printf 'wire%t%s%t=%t%s[%d];\n sa a sign_bit)
		(printf 'wire%t%s%t=%t%s[%d];\n sb b sign_bit)
		(printf 'wire%t%s%t=%t%s%t^%t%s;\n sz sa sb)
		(printf 'wire%t[%d:0]%t%s%t=%t%s[%d:%d];\n (- expt_sb 1) ea a expt_msb expt_lsb)
		(printf 'wire%t[%d:0]%t%s%t=%t%s[%d:%d];\n (- expt_sb 1) eb b expt_msb expt_lsb)
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t+%t%s%t-%t%d;\n (- expt_sb 1) e1 ea eb expt_mask)
		(printf 'wire%t[%d:0]%t%s%t=%t{1\'b1,%s[%d:0]};\n frac_sb fa a frac_msb)
		(printf 'wire%t[%d:0]%t%s%t=%t{1\'b1,%s[%d:0]};\n frac_sb fb b frac_msb)
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t*%t%s;\n (+ (* 2 (+ frac_sb 1)) -1) f1z fa fb)
		(printf 'wire%t%s%t=%t%s[%d];\n cf1z f1z (+ (* 2 (+ frac_sb 1)) -1))
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t?%t%s%t+%t1%t:%t%s;\n (- expt_sb 1) ez cf1z e1 e1)
		(printf 'wire%t[%d:0]%t%s%t=%t%s%t?%t%s[%d:%d]%t:%t%s[%d:%d];\n frac_msb fz cf1z f1z (+ (* 2 (+ frac_sb 1)) -2) (- (+ (* 2 (+ frac_sb 1)) -2) (- frac_sb 1)) f1z (+ (* 2 (+ frac_sb 1)) -3) (- (+ (* 2 (+ frac_sb 1)) -3) (- frac_sb 1)))
		(printf 'assign%t%s%t=%t{%s,%s,%s};\n z sz ez fz)
		(printf '//verilog-fp_mul%tend\n)
		))))

(define verilog-fp_mac
  (lambda (a b c z sign_bit expt_msb expt_lsb frac_msb frac_lsb)
	(let*
	  (z0 (s+ 'z0_ a '_ b))
	  (z1 (s+ 'z1_ a '_ b))
	  (progn
		(printf '\n//verilog-fp_mac%tstart\n)
		(printf 'wire%t[%d:0]%t%s,%t%s;\n sign_bit z0 z1)
		(verilog-fp_mul a b z0 sign_bit expt_msb expt_lsb frac_msb frac_lsb)
		(verilog-fp_add z1 c z sign_bit expt_msb expt_lsb frac_msb frac_lsb)
		(printf 'assign%t%s%t=%t%s;\n z1 z0)
		(printf '//verilog-fp_mac%tend\n)
		))))

